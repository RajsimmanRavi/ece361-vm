#!/bin/bash
# Thomas Lin (2016):
#   Update script for the ECE361 VM image

# Blue: "\e[1;34;40m $1 \e[0m"
# Yellow: "\e[1;33;40m $1 \e[0m"
# Green: "\e[1;32;40m $1 \e[0m"
function green_desc() {
    echo -e "\e[1;32;40m$1\e[0m"
}

function blue_desc() {
    echo -e "\e[1;34;40m$1\e[0m"
}

function yellow_desc() {
    echo -e "\e[1;33;40m$1\e[0m"
}

# Returns 255 (think signed char) on un-recoverable error
function update_update() {
    # Updates the update script... if need be (needs to have sudo access)
    if [[ `sudo -n echo ok` != "ok" ]]; then
        yellow_desc "This script can only be run by a user with sudo access without prompt"
        echo
        yellow_desc "Aborting update"
        exit 255
    fi

    # First check if update script is available on GitHub, see is curl'ing it fails
    UPDATE_SCRIPT_URL=https://raw.githubusercontent.com/t-lin/ece361-vm/master/ece361-update
    if [[ -z `curl -s -f ${UPDATE_SCRIPT_URL}` ]]; then
        yellow_desc "Unable to fetch latest update script"
        yellow_desc "\tUpdate may still work, assuming this script is already up-to-date"
        #return 255
    else
        # TODO: make this more network efficient... currently curls multiple times to same addr
        # Check this script against the one online (assumes one online is always up-to-date)
        CURR_LOC=`dirname "$0"`
        if [[ "${CURR_LOC}" =~ "/dev/" ]]; then
            # Script is being executed by piping it through stdin or a local file descriptor
            # No current file to diff or backup, just make assumption about target location
            CURR_NAME=`basename ${UPDATE_SCRIPT_URL}`
            CURR_LOC=/usr/local/bin

            if [[ -f ${CURR_LOC}/${CURR_NAME} ]]; then
                TIMESTAMP=`date +%s`
                blue_desc "Saving backup of current script to ${CURR_LOC}/.${CURR_NAME}.${TIMESTAMP}"
                sudo cp ${CURR_LOC}/${CURR_NAME} ${CURR_LOC}/.${CURR_NAME}.${TIMESTAMP}
            fi
            sudo wget -q -O ${CURR_LOC}/${CURR_NAME} ${UPDATE_SCRIPT_URL}
            sudo chmod +x ${CURR_LOC}/${CURR_NAME}

            # Execute script after 3 seconds and exit
            blue_desc "Successfully updated ${CURR_NAME}"
            blue_desc "Exiting and executing new script in 3 seconds..."
            sleep 3 && ${CURR_LOC}/${CURR_NAME} &
            exit 0
        else
            CURR_NAME=`basename "$0"`
            DIFF=`diff ${CURR_LOC}/${CURR_NAME} <(curl -s ${UPDATE_SCRIPT_URL})`

            if [[ -n ${DIFF} ]]; then
                # Save backup of current script and update the current script
                TIMESTAMP=`date +%s`
                blue_desc "Saving backup of current script to ${CURR_LOC}/.${CURR_NAME}.${TIMESTAMP}"
                sudo cp ${CURR_LOC}/${CURR_NAME} ${CURR_LOC}/.${CURR_NAME}.${TIMESTAMP}
                sudo wget -q -O ${CURR_LOC}/${CURR_NAME} ${UPDATE_SCRIPT_URL}
                sudo chmod +x ${CURR_LOC}/${CURR_NAME}

                # Execute script after 3 seconds and exit
                blue_desc "Successfully updated ${CURR_NAME}"
                blue_desc "Exiting and executing new script in 3 seconds..."
                sleep 3 && ${CURR_LOC}/${CURR_NAME} &
                exit 0
            fi
        fi
    fi
}

function update_ryu() {
    cd /home/ubuntu/ryu
    blue_desc "Updating Ryu..." && sudo git pull -f origin of_lab
    if [[ $? -gt 0 ]]; then
        yellow_desc "Error while updating Ryu, please check error message"
    else
        green_desc "Successfully updated Ryu"
    fi

    echo
    cd /usr/lib/python2.7/ryu_ofctl
    blue_desc "Updating ryu_ofctl..." && sudo git pull -f origin master
    if [[ $? -gt 0 ]]; then
        yellow_desc "Error while updating ryu_ofctl, please check error message"
    else
        green_desc "Successfully updated ryu_ofctl"
    fi
}

function update_vm() {
    echo && blue_desc "Updating packages..."
    sudo apt-get update

    # Package installations
    sudo apt-get install -y python-dpkt vnc4server

    # Configurations
    echo && blue_desc "Checking configurations..."
    # Set VNC password to 'ece361'
    vncpasswd << EOF
ece361
ece361
EOF
}

# Check internet connectivity first
if [[ `ping -q -w 1 -c 1 8.8.8.8 > /dev/null && echo 'ok'` = 'ok' ]]; then
    # Check if update script itself needs updating
    update_update
    echo
    update_ryu
    echo
    update_vm
    echo
    green_desc "Finished updating"
else
    # Check using 8.8.4.4
    if [[ `ping -q -w 1 -c 1 8.8.4.4 > /dev/null && echo 'ok'` = 'ok' ]]; then
        update_update
        echo
        update_ryu
        echo
        update_vm
        echo
        green_desc "Finished updating"
    else
        # Assuming it's a DHCP issue, try pinging gateway
        GATEWAY=`ip route | grep default | cut -d ' ' -f 3`

        if [[ `ping -q -w 1 -c 1 ${GATEWAY} > /dev/null && echo 'ok'` = 'ok' ]]; then
            # Gateway seems fine, but not internet... nothing we can do here
            yellow_desc "Cannot access the Internet, check your connectivity"
        else
            # Assuming it's a DHCP issue, try to re-acquire IP address
            yellow_desc "Cannot contact gateway. Trying to reset eth0..."
            ifdown eth0
            sleep 1
            ifup eth0

            yellow_desc "Check your internet connectivity, and re-run this script once verified"
        fi
    fi
fi

